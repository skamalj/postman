{
  "info": {
    "_postman_id": "03369eea-48ea-4b4c-8797-ffd1d7fc032f",
    "name": "mongo-employeees",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Create New Employee",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "92cb0e0b-980e-4d17-bba6-bee4a5662ac1",
            "exec": [
              "pm.test(\"Test Status\", function () {",
              "    pm.response.to.have.status(201);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "788baec5-713b-4f25-9892-623b43d6ffe3",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subscription}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "    {\n        \"id\": 3,\n        \"name\": \"Batman\",\n        \"age\": 50\n    }",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{protocol}}://{{host}}/{{api}}"
      },
      "response": [
        {
          "id": "3f604580-a42d-4536-838f-430c960993f1",
          "name": "Create New Employee",
          "originalRequest": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "    {\n        \"id\": 2,\n        \"name\": \"Superman\",\n        \"age\": 100\n    }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{host}}/{{api}}"
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Sat, 31 Jul 2021 11:22:47 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "{\n    \"id\": 2,\n    \"name\": \"Superman\",\n    \"age\": 100\n}"
        }
      ]
    },
    {
      "name": "Create Duplicate Employee",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "c17b9e77-a561-4a85-855f-bdabaca918bd",
            "exec": [
              "pm.test(\"Test Status\", function () {",
              "    pm.response.to.have.status(406);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "a8ef79f9-cd48-434a-97da-b3687e77f816",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subscription}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "    {\n        \"id\": 1,\n        \"name\": \"Batman\",\n        \"age\": 50\n    }",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{protocol}}://{{host}}/{{api}}"
      },
      "response": [
        {
          "id": "afc38ea5-a87d-4242-9acd-4d6a8746e38f",
          "name": "Create Duplicate Employee",
          "originalRequest": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "    {\n        \"id\": 1,\n        \"name\": \"Batman\",\n        \"age\": 50\n    }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{host}}/{{api}}"
          },
          "status": "Not Acceptable",
          "code": 406,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Mon, 02 Aug 2021 16:09:09 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "{\n    \"timestamp\": \"2021-08-02T16:09:09.532+00:00\",\n    \"status\": 406,\n    \"error\": \"Not Acceptable\",\n    \"trace\": \"com.example.demo.DemoApplication$DuplicateEmployeeIDException\\n\\tat com.example.demo.DemoApplication.addEmployee(DemoApplication.java:69)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\\n\\tat org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:782)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\\n\\tat org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\\n\\tat org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\\n\\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)\\n\\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\\n\\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:750)\\n\\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:692)\\n\\tat com.example.demo.DemoApplication$$EnhancerBySpringCGLIB$$2a79896a.addEmployee(<generated>)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\\n\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:197)\\n\\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:141)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:106)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:894)\\n\\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)\\n\\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1063)\\n\\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)\\n\\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\\n\\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)\\n\\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:681)\\n\\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\\n\\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:764)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:228)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163)\\n\\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:190)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163)\\n\\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:190)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163)\\n\\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:190)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163)\\n\\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:190)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163)\\n\\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\\n\\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:190)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:163)\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)\\n\\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:357)\\n\\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:382)\\n\\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\\n\\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893)\\n\\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1723)\\n\\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\\n\\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\\n\\tat java.base/java.lang.Thread.run(Thread.java:829)\\n\",\n    \"message\": \"Employee ID already Exists\",\n    \"path\": \"/employees\"\n}"
        }
      ]
    },
    {
      "name": "Create New Employee > 100 years",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "f87ecee5-1fa4-4548-a37e-2084c407005d",
            "exec": [
              "pm.test(\"Test Status\", function () {",
              "    pm.response.to.have.status(400);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "19852f9a-6123-42b1-92d9-d45de65fb373",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subscription}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "    {\n        \"id\": 9,\n        \"name\": \"Batman\",\n        \"age\":  101\n    }",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "{{protocol}}://{{host}}/{{api}}"
      },
      "response": [
        {
          "id": "0945b37e-43dc-4c98-8188-7706a7a44228",
          "name": "Create New Employee",
          "originalRequest": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "    {\n        \"id\": 2,\n        \"name\": \"Superman\",\n        \"age\": 100\n    }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{host}}/{{api}}"
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Sat, 31 Jul 2021 11:22:47 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "{\n    \"id\": 2,\n    \"name\": \"Superman\",\n    \"age\": 100\n}"
        }
      ]
    },
    {
      "name": "Get All Employees",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "c4991307-abe2-4cab-8deb-87c9226f39be",
            "exec": [
              "pm.test(\"Test Status\", function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test(\"Count Objects\", function () {",
              "    pm.expect(pm.response.json().length).to.be.equal(3)",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "e0c21003-b673-4f68-9cda-49c18b76a245",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subscription}}",
            "type": "text"
          }
        ],
        "url": "{{protocol}}://{{host}}/{{api}}"
      },
      "response": [
        {
          "id": "6a9a64ac-bf1c-42d2-817c-0bf6fcebd021",
          "name": "Get All Employees",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": "http://{{host}}/{{api}}"
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Sat, 31 Jul 2021 11:18:55 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Kamal\",\n        \"age\": 40\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Superman\",\n        \"age\": 100\n    }\n]"
        }
      ]
    },
    {
      "name": "Delete Employee",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "4446e9d4-1740-434d-a698-6f95ceceb3fb",
            "exec": [
              "pm.test(\"Test Status\", function () {",
              "    pm.response.to.have.status(200);",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "c9b92ce4-5558-4b54-ab5c-d9acf8a44d28",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subscription}}",
            "type": "text"
          }
        ],
        "url": "{{protocol}}://{{host}}/{{api}}/3"
      },
      "response": [
        {
          "id": "442b036d-1b82-4e79-9187-557ad260e5f1",
          "name": "Delete Employee",
          "originalRequest": {
            "method": "DELETE",
            "header": [],
            "url": "http://{{host}}/{{api}}/2"
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "plain",
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain;charset=UTF-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "Date",
              "value": "Sat, 31 Jul 2021 11:20:53 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "Employee Superman deleted"
        }
      ]
    },
    {
      "name": "Get Employee by Id",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "4a33b19e-3433-4da3-a17f-9db540cebc3f",
            "exec": [
              "pm.test(\"Test Status\", function () {",
              "    pm.response.to.have.status(200);",
              "})",
              "",
              "pm.test(\"Test Status\", function () {",
              "    pm.expect(pm.response.json().name).to.equal(\"Kamal\");",
              "})"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "74af754b-5b97-4a0b-bbf7-433e8fbee610",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subscription}}",
            "type": "text"
          }
        ],
        "url": "{{protocol}}://{{host}}/{{api}}/1"
      },
      "response": [
        {
          "id": "c41ed0e7-5b03-4a11-b569-a292a7613408",
          "name": "Get Employee by Id",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": "http://{{host}}/{{api}}/1"
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Sat, 31 Jul 2021 11:23:29 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "{\n    \"id\": 1,\n    \"name\": \"Kamal\",\n    \"age\": 40\n}"
        }
      ]
    },
    {
      "name": "Get Non-Existend Employee",
      "event": [
        {
          "listen": "test",
          "script": {
            "id": "1362c3f1-cbd4-4f7e-969b-451dd71bf339",
            "exec": [
              "pm.test(\"Test Status\", function () {",
              "    pm.response.to.have.status(404);",
              "})",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "809d10ab-b854-4409-8f02-d1a9861b54a7",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subscription}}",
            "type": "text"
          }
        ],
        "url": "{{protocol}}://{{host}}/{{api}}/20"
      },
      "response": [
        {
          "id": "4ee44af7-42b3-49b9-b55c-4409c37c6235",
          "name": "Get Employee by Id",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": "http://{{host}}/{{api}}/1"
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Date",
              "value": "Sat, 31 Jul 2021 11:23:29 GMT"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=60"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "{\n    \"id\": 1,\n    \"name\": \"Kamal\",\n    \"age\": 40\n}"
        }
      ]
    },
    {
      "name": "Get Swagger Yaml",
      "_postman_id": "97007937-833a-45c8-8cab-419d186c42a5",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key",
            "value": "{{subscription}}",
            "type": "text"
          }
        ],
        "url": "{{protocol}}://mongodbapp.kamalsblog.com/v3/api-docs.yaml"
      },
      "response": [
        {
          "id": "9987b96f-96f3-4eea-a516-fc6be9da4df5",
          "name": "Get Swagger Yaml",
          "originalRequest": {
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key",
                "value": "{{subscription}}",
                "type": "text"
              }
            ],
            "url": "{{protocol}}://{{host}}/v3/api-docs.yaml"
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "raw",
          "header": [
            {
              "key": "Cache-Control",
              "value": "private"
            },
            {
              "key": "Content-Length",
              "value": "1906"
            },
            {
              "key": "Content-Type",
              "value": "application/vnd.oai.openapi; charset=UTF-8"
            },
            {
              "key": "Date",
              "value": "Thu, 19 Aug 2021 07:41:46 GMT"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "openapi: 3.0.1\ninfo:\n  title: OpenAPI definition\n  version: v0\nservers:\n- url: http://mongodbapp.kamalsblog.com\n  description: Generated server url\npaths:\n  /employees:\n    get:\n      tags:\n      - demo-application\n      operationId: getEmployees\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Person'\n    post:\n      tags:\n      - demo-application\n      operationId: addEmployee\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Person'\n        required: true\n      responses:\n        \"201\":\n          description: Created\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Person'\n  /employees/{id}:\n    get:\n      tags:\n      - demo-application\n      operationId: getEmployee\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Person'\n    delete:\n      tags:\n      - demo-application\n      operationId: deleteEmployee\n      parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: string\ncomponents:\n  schemas:\n    Person:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        age:\n          type: integer\n          format: int32\n"
        }
      ]
    }
  ],
  "auth": {
    "type": "oauth2",
    "oauth2": {
      "scope": "api://mongodbapi.kamalsblog.com/Employee.Read",
      "redirect_uri": "https://oauth.pstmn.io/v1/browser-callback",
      "accessTokenUrl": "https://login.microsoftonline.com/{{tenantId}}/oauth2/v2.0/token",
      "authUrl": "https://login.microsoftonline.com/{{tenantId}}/oauth2/v2.0/authorize",
      "clientSecret": "{{ClientSecret}}",
      "clientId": "{{ClientID}}",
      "tokenName": "Access Token",
      "addTokenTo": "header"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "c9ce471f-cd93-4bfe-b692-72f728cf8c69",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "43bdc6ad-2577-43f5-8edb-446ad0320ab6",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}